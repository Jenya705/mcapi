import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
    id 'java'
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    group 'dev.mcapi'
    version '0.1.0-alpha'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    java {
        withSourcesJar()
    }

    shadowJar {
        if (project.hasProperty('dir')) {
            destinationDir(new File((String) project.getProperties().get('dir')))
        }
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:23.0.0'
        compileOnly 'org.projectlombok:lombok:1.18.24'
        annotationProcessor 'org.projectlombok:lombok:1.18.24'

        implementation 'io.projectreactor:reactor-core:3.4.22'
        implementation 'net.kyori:adventure-api:4.11.0'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
        implementation 'com.google.inject:guice:5.1.0'

        testCompileOnly 'org.projectlombok:lombok:1.18.24'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    }

    processResources {
        from 'src/main'
        filter ReplaceTokens, tokens: [version: version]
    }

    tasks.withType(ProcessResources).configureEach() {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

subprojects {

    apply plugin: 'maven-publish'
    apply plugin: 'java'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId = group
                artifactId archivesBaseName
                version = project.version
            }
        }
        repositories {
            maven {
                def snapshotUrl = 'https://repo.codemc.io/repository/maven-snapshots/'
                def releaseUrl = 'https://repo.codemc.io/repository/maven-releases/'

                // You can use any other check here to set what URL should be used.
                url = project.version.endsWith('alpha') || project.version.endsWith('beta') ? snapshotUrl : releaseUrl

                // ORG_GRADLE_PROJECT_mavenUsername and ORG_GRADLE_PROJECT_mavenPassword are the environments you defined before.
                def mavenUsername = System.getenv('CODEMC_mavenUsername')
                def mavenPassword = System.getenv('CODEMC_mavenPassword')

                if (mavenUsername != null && mavenPassword != null) {
                    System.out.println('Setting credentials')
                    credentials {
                        username mavenUsername
                        password mavenPassword
                    }
                }
            }
        }
    }

}