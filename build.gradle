import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id 'maven-publish'
    id 'java'
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    group 'com.github.jenya705'
    version '0.0.8-alpha'

    java {
        withSourcesJar()
    }

    shadowJar {
        if (project.hasProperty("dir")) {
            destinationDir(new File((String) project.getProperties().get("dir")))
        }
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
        compileOnly 'org.jetbrains:annotations:22.0.0'
        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
        testCompileOnly 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    }

    processResources {
        from 'src/main'
        filter ReplaceTokens, tokens: [version: version]
    }

    tasks.withType(ProcessResources).configureEach() {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

subprojects {

    apply plugin: 'maven-publish'
    apply plugin: 'java'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId = group
                artifactId archivesBaseName
                version = project.version
            }
        }
        repositories {
            maven {
                def snapshotUrl = "https://repo.codemc.io/repository/maven-snapshots/"
                def releaseUrl = "https://repo.codemc.io/repository/maven-releases/"

                // You can use any other check here to set what URL should be used.
                url = project.version.endsWith("alpha") || project.version.endsWith("beta") ? snapshotUrl : releaseUrl

                // ORG_GRADLE_PROJECT_mavenUsername and ORG_GRADLE_PROJECT_mavenPassword are the environments you defined before.
                def mavenUsername = System.getenv("CODEMC_mavenUsername")
                def mavenPassword = System.getenv("CODEMC_mavenPassword")

                if (mavenUsername != null && mavenPassword != null) {
                    System.out.println("Setting credentials")
                    credentials {
                        username mavenUsername
                        password mavenPassword
                    }
                }
            }
        }
    }

}